
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import json

from database import Database
from bitrix_api import BitrixAPI, validate_phone
from states import RegistrationStates
from keyboards import (
    get_privacy_consent_keyboard,
    get_role_selection_keyboard,
    get_phone_request_keyboard,
    get_designer_menu_keyboard,
    get_cancel_keyboard
)
import config

router = Router()
db = Database()
bitrix = BitrixAPI()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command with traffic source tracking"""
    user_id = message.from_user.id

    # deep_link rot ebal ego
    traffic_source = None
    if message.text and len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        if start_param.startswith("start="):
            traffic_source = start_param.replace("start=", "").upper()
        else:
            traffic_source = start_param.upper()

    user = await db.get_user(user_id)

    if user:
        if user.get('privacy_consent') == 1:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.get('full_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!",
                reply_markup=get_designer_menu_keyboard() if user.get('role') == 'designer' else None
            )
        else:
            await start_privacy_flow(message, state, traffic_source)
    else:
        await db.add_user(user_id, traffic_source)
        await start_privacy_flow(message, state, traffic_source)


async def start_privacy_flow(message: Message, state: FSMContext, traffic_source: str = None):
    """Start privacy consent flow"""
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è "
        f"–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ 152-–§–ó.\n\n"
        f"üìÑ [–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({config.PRIVACY_POLICY_URL})",
        reply_markup=get_privacy_consent_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(RegistrationStates.waiting_for_privacy_consent)


@router.callback_query(F.data == "privacy_accept", RegistrationStates.waiting_for_privacy_consent)
async def privacy_accepted(callback: CallbackQuery, state: FSMContext):
    """Handle privacy policy acceptance"""
    await db.update_user(callback.from_user.id, privacy_consent=1)

    await callback.message.edit_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –≤–∞—à—É —Ä–æ–ª—å:"
    )
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=get_role_selection_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_role)
    await callback.answer()


@router.callback_query(F.data == "privacy_decline", RegistrationStates.waiting_for_privacy_consent)
async def privacy_declined(callback: CallbackQuery, state: FSMContext):
    """Handle privacy policy decline"""
    await callback.message.edit_text(
        "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
        "–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data.startswith("role_"), RegistrationStates.waiting_for_role)
async def role_selected(callback: CallbackQuery, state: FSMContext):
    """Handle role selection"""
    role = callback.data.replace("role_", "")
    role_name = config.USER_ROLES.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")

    await state.update_data(role=role)

    if role == "designer":
        await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role_name}")
        await callback.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_full_name)
    else:
        await callback.message.edit_text(
            f"üöß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–æ–ª–∏ '{role_name}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{config.MANAGER_USERNAME}"
        )
        await db.update_user(callback.from_user.id, role=role)
        await state.clear()

    await callback.answer()


@router.message(RegistrationStates.waiting_for_full_name)
async def full_name_entered(message: Message, state: FSMContext):
    """Handle full name input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    full_name = message.text.strip()

    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è –∏ –ò–º—è):")
        return

    await state.update_data(full_name=full_name)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_company)


@router.message(RegistrationStates.waiting_for_company)
async def company_entered(message: Message, state: FSMContext):
    """Handle company name input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    company_name = message.text.strip()
    await state.update_data(company_name=company_name)

    data = await state.get_data()
    full_name = data.get('full_name')

    bitrix_contact = await bitrix.find_contact_by_name(full_name)

    if bitrix_contact:
        await state.update_data(bitrix_id=bitrix_contact.get('ID'))

        phone = ""
        if bitrix_contact.get('PHONE'):
            phone = bitrix_contact['PHONE'][0].get('VALUE', '') if isinstance(bitrix_contact['PHONE'], list) else ""

        email = ""
        if bitrix_contact.get('EMAIL'):
            email = bitrix_contact['EMAIL'][0].get('VALUE', '') if isinstance(bitrix_contact['EMAIL'], list) else ""

        await message.answer(
            f"‚úÖ –í—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–§–ò–û: {full_name}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Email: {email}\n\n"
            f"–°–æ–∑–¥–∞—é –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç..."
        )

        await db.update_user(
            message.from_user.id,
            full_name=full_name,
            company_name=company_name,
            phone=phone,
            email=email,
            role='designer',
            bitrix_id=bitrix_contact.get('ID')
        )

        await complete_registration(message, state)
    else:
        await message.answer(
            "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_request_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def phone_shared(message: Message, state: FSMContext):
    """Handle phone number shared via button"""
    phone = message.contact.phone_number
    await state.update_data(phone=phone)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_email)


@router.message(RegistrationStates.waiting_for_phone)
async def phone_entered(message: Message, state: FSMContext):
    """Handle phone number entered manually"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    phone = message.text.strip()

    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ +79161234567\n"
            "‚Ä¢ 89161234567\n"
            "‚Ä¢ 79161234567\n"
            "‚Ä¢ 9161234567\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'",
            reply_markup=get_phone_request_keyboard()
        )
        return

    await state.update_data(phone=phone)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_email)


@router.message(RegistrationStates.waiting_for_email)
async def email_entered(message: Message, state: FSMContext):
    """Handle email input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    email = message.text.strip()

    if '@' not in email or '.' not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return

    await state.update_data(email=email)

    data = await state.get_data()
    full_name_parts = data.get('full_name', '').split()

    contact_data = {
        "last_name": full_name_parts[0] if len(full_name_parts) > 0 else "",
        "first_name": full_name_parts[1] if len(full_name_parts) > 1 else "",
        "middle_name": full_name_parts[2] if len(full_name_parts) > 2 else "",
        "phone": data.get('phone'),
        "email": email,
        "company_name": data.get('company_name'),
        "telegram_id": message.from_user.id
    }

    bitrix_id = await bitrix.create_contact(contact_data)

    if bitrix_id:
        await state.update_data(bitrix_id=bitrix_id)

        await db.update_user(
            message.from_user.id,
            full_name=data.get('full_name'),
            company_name=data.get('company_name'),
            phone=data.get('phone'),
            email=email,
            role='designer',
            bitrix_id=bitrix_id
        )

        await complete_registration(message, state)
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{config.MANAGER_USERNAME}"
        )
        await state.clear()


async def complete_registration(message: Message, state: FSMContext):
    """Complete registration and show main menu"""
    await message.answer(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.",
        reply_markup=get_designer_menu_keyboard()
    )
    await state.clear()

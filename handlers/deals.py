from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import Database
from bitrix_api import BitrixAPI, validate_phone
from states import DealCreationStates, DealStatusStates
from keyboards import get_designer_menu_keyboard, get_cancel_keyboard, get_confirmation_keyboard
import config

router = Router()
db = Database()
bitrix = BitrixAPI()


@router.message(F.text == "üìù –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞")
async def new_deal_start(message: Message, state: FSMContext):
    """Start new deal creation"""
    user = await db.get_user(message.from_user.id)

    if not user or user.get('role') != 'designer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤.")
        return

    await message.answer(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DealCreationStates.waiting_for_client_name)


@router.message(DealCreationStates.waiting_for_client_name)
async def client_name_entered(message: Message, state: FSMContext):
    """Handle client name input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_designer_menu_keyboard())
        await state.clear()
        return

    client_name = message.text.strip()

    if len(client_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è –∏ –ò–º—è):")
        return

    await state.update_data(client_name=client_name)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(DealCreationStates.waiting_for_client_phone)


@router.message(DealCreationStates.waiting_for_client_phone)
async def client_phone_entered(message: Message, state: FSMContext):
    """Handle client phone input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_designer_menu_keyboard())
        await state.clear()
        return

    client_phone = message.text.strip()

    if not validate_phone(client_phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ +79161234567\n"
            "‚Ä¢ 89161234567\n"
            "‚Ä¢ 79161234567\n"
            "‚Ä¢ 9161234567"
        )
        return

    await state.update_data(client_phone=client_phone)

    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF:\n"
        "(–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)"
    )
    await state.set_state(DealCreationStates.waiting_for_project_file)


@router.message(DealCreationStates.waiting_for_project_file, F.document)
async def project_file_uploaded(message: Message, state: FSMContext):
    """Handle project file upload"""
    document = message.document

    if document.mime_type != 'application/pdf':
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'."
        )
        return

    await state.update_data(project_file_id=document.file_id, project_file_name=document.file_name)

    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ:")
    await state.set_state(DealCreationStates.waiting_for_comment)


@router.message(DealCreationStates.waiting_for_project_file)
async def project_file_invalid(message: Message, state: FSMContext):
    """Handle invalid project file"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_designer_menu_keyboard())
        await state.clear()
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞.")


@router.message(DealCreationStates.waiting_for_comment)
async def comment_entered(message: Message, state: FSMContext):
    """Handle comment input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_designer_menu_keyboard())
        await state.clear()
        return

    comment = message.text.strip()
    await state.update_data(comment=comment)

    data = await state.get_data()
    user = await db.get_user(message.from_user.id)

    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {data.get('client_name')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('client_phone')}\n"
        f"üìÑ –§–∞–π–ª: {data.get('project_file_name')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏?"
    )

    await message.answer(confirmation_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(DealCreationStates.confirming_deal)


@router.callback_query(F.data == "confirm_yes", DealCreationStates.confirming_deal)
async def deal_confirmed(callback: CallbackQuery, state: FSMContext):
    """Handle deal confirmation"""
    data = await state.get_data()
    user = await db.get_user(callback.from_user.id)

    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é —Å–¥–µ–ª–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ...")

    deal_data = {
        "designer_name": user.get('full_name'),
        "designer_bitrix_id": user.get('bitrix_id'),
        "client_full_name": data.get('client_name'),
        "client_phone": data.get('client_phone'),
        "project_file_url": data.get('project_file_id'),  # In real scenario, upload to Bitrix
        "comment": data.get('comment')
    }

    bitrix_deal = await bitrix.create_lead(deal_data)

    if bitrix_deal:
        await db.add_deal({
            "deal_number": bitrix_deal.get('number'),
            "bitrix_deal_id": bitrix_deal.get('id'),
            "designer_telegram_id": callback.from_user.id,
            "client_full_name": data.get('client_name'),
            "client_phone": data.get('client_phone'),
            "project_file_id": data.get('project_file_id'),
            "comment": data.get('comment'),
            "status": bitrix_deal.get('status', 'NEW')
        })

        await callback.message.answer(
            f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìã –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏: {bitrix_deal.get('number')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {await bitrix.get_stage_name(bitrix_deal.get('status', 'NEW'))}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ —Å–¥–µ–ª–∫–∏' –∏–ª–∏ '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å'",
            reply_markup=get_designer_menu_keyboard()
        )
    else:
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{config.MANAGER_USERNAME}",
            reply_markup=get_designer_menu_keyboard()
        )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "confirm_no", DealCreationStates.confirming_deal)
async def deal_cancelled(callback: CallbackQuery, state: FSMContext):
    """Handle deal cancellation"""
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_designer_menu_keyboard())
    await state.clear()
    await callback.answer()


@router.message(F.text == "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
async def my_deals(message: Message):
    """Show user's deals"""
    user = await db.get_user(message.from_user.id)

    if not user or user.get('role') != 'designer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤.")
        return

    deals = await db.get_user_deals(message.from_user.id)

    if not deals:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞'!",
            reply_markup=get_designer_menu_keyboard()
        )
        return

    deals_text = "üìã –í–∞—à–∏ —Å–¥–µ–ª–∫–∏:\n\n"

    for deal in deals:
        status_name = await bitrix.get_stage_name(deal.get('status', 'NEW'))
        deals_text += (
            f"üìå –°–¥–µ–ª–∫–∞ #{deal.get('deal_number')}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {deal.get('client_full_name')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_name}\n"
            f"üìÖ –î–∞—Ç–∞: {deal.get('created_date', '')[:10]}\n"
            f"{'‚îÄ' * 30}\n\n"
        )

    await message.answer(deals_text, reply_markup=get_designer_menu_keyboard())


@router.message(F.text == "üîç –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
async def check_status_start(message: Message, state: FSMContext):
    """Start deal status check"""
    user = await db.get_user(message.from_user.id)

    if not user or user.get('role') != 'designer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤.")
        return

    await message.answer(
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DealStatusStates.waiting_for_deal_number)


@router.message(DealStatusStates.waiting_for_deal_number)
async def deal_number_entered(message: Message, state: FSMContext):
    """Handle deal number input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_designer_menu_keyboard())
        await state.clear()
        return

    deal_number = message.text.strip()

    deal = await db.get_deal_by_number(deal_number)

    if not deal:
        await message.answer(
            f"‚ùå –°–¥–µ–ª–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {deal_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    if deal.get('designer_telegram_id') != message.from_user.id:
        await message.answer(
            "‚ùå –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç."
        )
        await state.clear()
        return

    current_status = await bitrix.get_lead_status(deal.get('bitrix_deal_id'))

    if current_status:
        # Update local database
        await db.update_deal_status(deal_number, current_status)
        status_name = await bitrix.get_stage_name(current_status)

        await message.answer(
            f"üìä –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ #{deal_number}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {deal.get('client_full_name')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {deal.get('client_phone')}\n"
            f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_name}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {deal.get('created_date', '')[:10]}",
            reply_markup=get_designer_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{config.MANAGER_USERNAME}",
            reply_markup=get_designer_menu_keyboard()
        )

    await state.clear()


@router.message(F.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def referral_program(message: Message):
    """Show referral program info"""
    await message.answer(
        "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        "üöß –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{config.MANAGER_USERNAME}",
        reply_markup=get_designer_menu_keyboard()
    )
